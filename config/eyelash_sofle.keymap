#define ZMK_POINTING_DEFAULT_MOVE_VAL 2000  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 50   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};


/ {

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
        tap-ms = <100>;
    };


    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESC     &kp N1     &kp N2        &kp N3        &kp N4      &kp N5       &kp UP_ARROW     &kp N6     &kp N7     &kp N8           &kp N9           &kp N0               &kp BACKSPACE
&kp TAB     &kp A      &kp Z         &kp E         &kp R       &kp T        &kp DOWN_ARROW   &kp Y      &kp U      &kp I            &kp O            &kp P                &kp EQUAL
&kp CAPS    &kp Q      &kp S         &kp D         &kp F       &kp G        &kp LEFT_ARROW   &kp H      &kp J      &kp K            &kp L            &kp M                &kp MINUS
&kp LSHFT   &kp W      &kp X         &kp C         &kp V       &kp B        &kp RIGHT_ARROW  &kp N      &kp SLASH  &kp SEMICOLON    &kp LEFT_BRACKET &kp RIGHT_BRACKET    &kp PERIOD
&kp C_MUTE  &kp LCTRL  &kp LEFT_ALT  &kp LEFT_GUI  &kp SPACE   &mo 1        &trans           &kp ENTER  &kp SPACE  &mo 2            &kp APOS         &kp PRINTSCREEN
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&kp C_PREVIOUS   &kp F1           &kp F2          &kp F3           &kp F4           &kp F5             &mmv MOVE_UP     &kp F6           &kp F7           &kp F8      &kp F9     &kp F10           &kp DELETE
&kp C_PLAY_PAUSE &kp GRAVE        &mkp LCLK       &mkp MCLK        &mkp RCLK        &mkp MB4           &mmv MOVE_DOWN   &kp PG_UP        &kp END          &kp UP      &kp HOME   &kp MINUS         &rgb_ug RGB_BRD
&kp C_NEXT       &kp TILDE        &trans          &trans           &trans           &mkp MB5           &mmv MOVE_LEFT   &kp PG_DN        &kp LEFT         &kp DOWN    &kp RIGHT  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&kp C_MUTE       &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_SPI    &mmv MOVE_RIGHT  &rgb_ug RGB_BRI  &kp BSLH         &kp INSERT  &kp F11    &kp F12           &kp COMMA
&trans           &trans           &trans          &trans           &trans           &trans             &mkp LCLK        &trans           &trans           &trans      &trans     &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&inc_dec_kp C_BRIGHTNESS_INC C_BRIGHTNESS_DEC>;
        };

        layer_2 {
            bindings = <
&kp C_PREVIOUS   &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp C_PLAY      &kp F6  &kp F7  &kp F8      &kp F9     &kp F10      &trans
&kp C_PLAY_PAUSE &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans          &kp C_PAUSE     &trans  &trans  &kp F11     &kp F12    &kp UNDER    &kp PLUS
&kp C_NEXT       &out OUT_USB  &out OUT_BLE    &trans        &trans        &trans          &kp C_PREVIOUS  &trans  &trans  &trans      &trans     &kp LBRC     &kp RBRC
&kp C_MUTE       &sys_reset    &trans          &bootloader   &trans        &trans          &kp C_NEXT      &trans  &trans  &sys_reset  &soft_off  &bootloader  &trans
&trans           &trans        &trans          &trans        &trans        &trans          &mkp LCLK       &trans  &trans  &trans      &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
